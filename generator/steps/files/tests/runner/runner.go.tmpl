{{- define "test_runner" -}}
package runner

import (
	"context"
	"fmt"
	"log/slog"
	"net"
	"net/url"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/rom8726/pgfixtures"
	"github.com/rom8726/testy"
	"github.com/stretchr/testify/require"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/modules/postgres"
	"github.com/testcontainers/testcontainers-go/wait"

	"{{ .Module }}/internal"
	"{{ .Module }}/internal/config"
)

type Config struct {
	CasesDir string
}

func Run(t *testing.T, testCfg *Config) {
	t.Helper()

	env := NewEnv()

	var connStr string
	var err error

	{{- if eq .DB "mysql" }}
	// MySQL ------------------------------------------------------------------
	dbType := pgfixtures.MySQL
	mysqlContainer, mysqlDown := startMySQL(t)
	defer mysqlDown()

	mysqlPort, err := mysqlContainer.MappedPort(t.Context(), "3306")
	require.NoError(t, err)
	env.Set("MYSQL_PORT", mysqlPort.Port())

	connStr = fmt.Sprintf("user:password@tcp(localhost:%s)/test_db?parseTime=true", mysqlPort.Port())
	{{- else }}
	// Postgres ---------------------------------------------------------------
	dbType := pgfixtures.PostgreSQL
	pgContainer, pgDown := startPostgres(t)
	defer pgDown()

	connStr, err = pgContainer.ConnectionString(t.Context(), "sslmode=disable")
	require.NoError(t, err)
	env.Set("POSTGRES_PORT", extractPort(connStr))
	{{- end }}

	{{- range $infra := .UseInfra }}
	{{- if eq $infra "redis" }}
	// Redis ------------------------------------------------------------------
	redisC, redisDown := startRedis(t)
	defer redisDown()

	redisPort, err := redisC.MappedPort(t.Context(), "6379")
	require.NoError(t, err)
	env.Set("REDIS_PORT", redisPort.Port())
	{{- end }}

	{{- if eq $infra "kafka" }}
	// Kafka ------------------------------------------------------------------
	kafkaC, kafkaDown := startKafka(t)
	defer kafkaDown()

	kafkaPort, err := kafkaC.MappedPort(t.Context(), "9092")
	require.NoError(t, err)
	env.Set("KAFKA_PORT", kafkaPort.Port())
	env.Set("KAFKA_BROKERS", fmt.Sprintf("localhost:%s", kafkaPort.Port()))
	{{- end }}

	{{- if eq $infra "etcd" }}
	// Etcd -------------------------------------------------------------------
	etcdC, etcdDown := startEtcd(t)
	defer etcdDown()

	etcdPort, err := etcdC.MappedPort(t.Context(), "2379")
	require.NoError(t, err)
	env.Set("ETCD_ENDPOINTS", fmt.Sprintf("localhost:%s", etcdPort.Port()))
	{{- end }}

	{{- if eq $infra "nats" }}
	// NATS -------------------------------------------------------------------
	natsC, natsDown := startNats(t)
	defer natsDown()

	natsPort, err := natsC.MappedPort(t.Context(), "4222")
	require.NoError(t, err)
	env.Set("NATS_URL", fmt.Sprintf("nats://localhost:%s", natsPort.Port()))
	{{- end }}

	{{- if eq $infra "rabbitmq" }}
	// RabbitMQ ---------------------------------------------------------------
	rmqC, rmqDown := startRabbitMQ(t)
	defer rmqDown()

	rmqPort, err := rmqC.MappedPort(t.Context(), "5672")
	require.NoError(t, err)
	env.Set("RABBITMQ_PORT", rmqPort.Port())
	env.Set("RABBITMQ_HOST", "localhost")
	{{- end }}

	{{- if eq $infra "elasticsearch" }}
	// Elasticsearch ----------------------------------------------------------
	esC, esDown := startElasticsearch(t)
	defer esDown()

	esPort, err := esC.MappedPort(t.Context(), "9200")
	require.NoError(t, err)
	env.Set("ELASTICSEARCH_URL", fmt.Sprintf("http://localhost:%s", esPort.Port()))
	{{- end }}
	{{- end }}

	// Config and App initialization ------------------------------------------
	env.SetUp()
    defer env.CleanUp()

	cfg, err := config.New("")
	if err != nil {
		t.Fatal(err)
	}

	loggerHandler := slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
		Level: &cfg.Logger,
	})
	logger := slog.New(loggerHandler)
	slog.SetDefault(logger)

	time.Sleep(time.Second * 3)
	app, err := internal.NewApp(t.Context(), cfg, logger)
	if err != nil {
		t.Fatal(err)
	}
	defer app.Close()

	if err := upMigrations(connStr, cfg.MigrationsDir); err != nil {
		t.Fatal(err)
	}

	testyCfg := testy.Config{
		Handler:     app.APIServer.Handler,
		DBType:      dbType,
		CasesDir:    testCfg.CasesDir,
		FixturesDir: "./fixtures",
		ConnStr:     connStr,
	}
	testy.Run(t, &testyCfg)
}

// Postgres -----------------------------------------------------------------
func startPostgres(t *testing.T) (*postgres.PostgresContainer, func()) {
	t.Helper()

	container, err := postgres.Run(t.Context(),
		"postgres:16",
		postgres.WithDatabase("test_db"),
		postgres.WithUsername("user"),
		postgres.WithPassword("password"),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).
				WithStartupTimeout(10*time.Second),
		),
	)
	require.NoError(t, err)

	return container, func() {
		if err := container.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate postgres: %v", err)
		}
	}
}

// MySQL --------------------------------------------------------------------
func startMySQL(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "mysql:8",
			ExposedPorts: []string{"3306/tcp"},
			Env: map[string]string{
				"MYSQL_DATABASE":      "test_db",
				"MYSQL_USER":          "user",
				"MYSQL_PASSWORD":      "password",
				"MYSQL_ROOT_PASSWORD": "root_password",
			},
			WaitingFor: wait.ForLog("port: 3306  MySQL Community Server"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate mysql: %v", err)
		}
	}
}

{{- range $infra := .UseInfra }}
{{- if eq $infra "redis" }}
// Redis --------------------------------------------------------------------
func startRedis(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "redis:7-alpine",
			ExposedPorts: []string{"6379/tcp"},
			Env: map[string]string{
				"REDIS_PASSWORD": "password",
			},
			WaitingFor: wait.ForLog("Ready to accept connections"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate redis: %v", err)
		}
	}
}
{{- end }}

{{- if eq $infra "kafka" }}
// Kafka --------------------------------------------------------------------
func startKafka(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "bitnami/kafka:3.5",
			ExposedPorts: []string{"9092/tcp"},
			Env: map[string]string{
				"KAFKA_CFG_NODE_ID":                     "0",
				"KAFKA_CFG_PROCESS_ROLES":               "controller,broker",
				"KAFKA_CFG_LISTENERS":                   "PLAINTEXT://:9092,CONTROLLER://:9093",
				"KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP": "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT",
				"KAFKA_CFG_CONTROLLER_QUORUM_VOTERS":    "0@kafka:9093",
				"KAFKA_CFG_CONTROLLER_LISTENER_NAMES":   "CONTROLLER",
				"ALLOW_PLAINTEXT_LISTENER":              "yes",
			},
			WaitingFor: wait.ForLog("Kafka Server started"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate kafka: %v", err)
		}
	}
}
{{- end }}

{{- if eq $infra "etcd" }}
// Etcd ---------------------------------------------------------------------
func startEtcd(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "bitnami/etcd:latest",
			ExposedPorts: []string{"2379/tcp"},
			Env: map[string]string{
				"ALLOW_NONE_AUTHENTICATION": "yes",
				"ETCD_ADVERTISE_CLIENT_URLS": "http://0.0.0.0:2379",
			},
			WaitingFor: wait.ForLog("ready to serve client requests"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate etcd: %v", err)
		}
	}
}
{{- end }}

{{- if eq $infra "nats" }}
// NATS ---------------------------------------------------------------------
func startNats(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "nats:latest",
			ExposedPorts: []string{"4222/tcp"},
			Cmd:          []string{"--jetstream"},
			WaitingFor:   wait.ForLog("Server is ready"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate nats: %v", err)
		}
	}
}
{{- end }}

{{- if eq $infra "rabbitmq" }}
// RabbitMQ -----------------------------------------------------------------
func startRabbitMQ(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "rabbitmq:3-management",
			ExposedPorts: []string{"5672/tcp"},
			Env: map[string]string{
				"RABBITMQ_DEFAULT_USER": "guest",
				"RABBITMQ_DEFAULT_PASS": "guest",
			},
			WaitingFor: wait.ForLog("Server startup complete"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate rabbitmq: %v", err)
		}
	}
}
{{- end }}

{{- if eq $infra "elasticsearch" }}
// Elasticsearch ------------------------------------------------------------
func startElasticsearch(t *testing.T) (testcontainers.Container, func()) {
	t.Helper()

	c, err := testcontainers.GenericContainer(t.Context(), testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        "docker.elastic.co/elasticsearch/elasticsearch:8.6.0",
			ExposedPorts: []string{"9200/tcp"},
			Env: map[string]string{
				"discovery.type":          "single-node",
				"xpack.security.enabled":  "false",
			},
			WaitingFor: wait.ForLog("started"),
		},
		Started: true,
	})
	require.NoError(t, err)

	return c, func() {
		if err := c.Terminate(context.Background()); err != nil {
			t.Fatalf("terminate elasticsearch: %v", err)
		}
	}
}
{{- end }}
{{- end }}

// extractPort парсит строку подключения и возвращает порт базы данных.
func extractPort(connStr string) string {
	// Check if it's a MySQL connection string (user:password@tcp(host:port)/dbname)
	if strings.Contains(connStr, "@tcp(") {
		start := strings.Index(connStr, "@tcp(")
		if start == -1 {
			return ""
		}
		start += 5 // Skip "@tcp("

		end := strings.Index(connStr[start:], ")")
		if end == -1 {
			return ""
		}

		hostPort := connStr[start : start+end]
		_, port, _ := net.SplitHostPort(hostPort)
		return port
	}

	// Otherwise, assume it's a PostgreSQL connection string (postgres://user:password@host:port/dbname)
	u, err := url.Parse(connStr)
	if err != nil {
		return ""
	}

	host, port, _ := net.SplitHostPort(u.Host)
	if host == "" {
		return ""
	}

	return port
}
{{ end }}
