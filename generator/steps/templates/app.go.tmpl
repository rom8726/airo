{{ define "app_go" }}package internal

import (
	"context"
	"fmt"
	"log/slog"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rom8726/di"

	"{{ .Module }}/internal/api/rest"
	"{{ .Module }}/internal/config"
)

const (
	ctxTimeout = 10 * time.Second
)

type App struct {
	Config *config.Config
	Logger *slog.Logger

	{{ if .UsePostgres }}PostgresPool *pgxpool.Pool{{ end }}

	container *di.Container
	diApp     *di.App
}

func NewApp(ctx context.Context, cfg *config.Config, logger *slog.Logger) (*App, error) {
	ctx, cancel := context.WithTimeout(ctx, ctxTimeout)
	defer cancel()

	{{ if .UsePostgres }}
	pgPool, err := newPostgresConnPool(ctx, &cfg.Postgres)
	if err != nil {
		return nil, fmt.Errorf("create postgres pool: %w", err)
	}
	{{ end }}

	container := di.New()
	diApp := di.NewApp(container)

	return &App{
		Config:       cfg,
		Logger:       logger,
		PostgresPool: pgPool,
		container:    container,
		diApp:        diApp,
	}, nil
}

func (a *App) RegisterComponent(constructor any) *di.Provider {
	return a.container.Provide(constructor)
}

func (a *App) ResolveComponent(target any) error {
	return a.container.Resolve(target)
}

func (a *App) ResolveComponentsToStruct(target any) error {
	return a.container.ResolveToStruct(target)
}

func (a *App) Run(ctx context.Context) error {
	var restAPI *rest.RestAPI
	if err := a.container.Resolve(restAPI); err != nil {
		return fmt.Errorf("resolve REST API service component: %w", err)
	}

	go func() {
		if err := a.diApp.Run(ctx); err != nil {
			a.Logger.Error(err.Error())
		}
	}()

	return nil
}

func (a *App) Close() {
	{{ if .UsePostgres }}
	if a.PostgresPool != nil {
		a.PostgresPool.Close()
	}
	{{ end }}
}

{{ if .UsePostgres }}
func newPostgresConnPool(ctx context.Context, cfg *config.Postgres) (*pgxpool.Pool, error) {
	pgCfg, err := pgxpool.ParseConfig(cfg.ConnStringWithPoolSize())
	if err != nil {
		return nil, fmt.Errorf("parse config: %w", err)
	}

	//pgCfg.ConnConfig.Tracer = &msxtrace.PGXTracer{}
	pgCfg.MaxConnLifetime = cfg.ConnMaxLifetime
	pgCfg.MaxConnLifetimeJitter = time.Second * 5
	pgCfg.MaxConnIdleTime = cfg.MaxIdleConnTime
	pgCfg.HealthCheckPeriod = time.Second * 5

	pool, err := pgxpool.NewWithConfig(ctx, pgCfg)
	if err != nil {
		return nil, err
	}

	if err := pool.Ping(ctx); err != nil {
		return nil, fmt.Errorf("ping: %w", err)
	}

	return pool, nil
}
{{ end }}
{{ end }}