{{- define "config_go" -}}
package config

import (
	"fmt"
	"log/slog"
	"net/url"
	"time"

	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
)

const (
	prefix = ""
)

type Config struct {
	Logger Logger `envconfig:"LOGGER"`
	APIServer Server `envconfig:"API_SERVER"`
	TechServer Server `envconfig:"TECH_SERVER"`
	MigrationsDir string `envconfig:"MIGRATIONS_DIR" default:"./migrations"`
	{{ .DB.Processor.ConfigField }}
	{{- range .Infras }}
	{{ .Processor.ConfigField }}
	{{- end }}
}

type Logger struct {
	Lvl string `envconfig:"LEVEL" default:"info"`
}

func (l *Logger) Level() slog.Level {
	switch l.Lvl {
	case "debug":
		return slog.LevelDebug
	case "info":
		return slog.LevelInfo
	case "warn":
		return slog.LevelWarn
	case "error":
		return slog.LevelError
	default:
		panic("invalid logger level " + l.Lvl)
	}
}

type Server struct {
	Addr		 string		`envconfig:"ADDR" required:"true"`
	ReadTimeout  time.Duration `envconfig:"READ_TIMEOUT" default:"15s"`
	WriteTimeout time.Duration `envconfig:"WRITE_TIMEOUT" default:"30s"`
	IdleTimeout  time.Duration `envconfig:"IDLE_TIMEOUT" default:"60s"`
}

{{ .DB.Processor.Config }}

{{- range .Infras }}
{{ .Processor.Config }}
{{- end }}

func New(filePath string) (*Config, error) {
	cfg := &Config{}

	if filePath != "" {
		if err := godotenv.Load(filePath); err != nil {
			return nil, fmt.Errorf("error loading env file: %w", err)
		}
	}

	if err := envconfig.Process(prefix, cfg); err != nil {
		return nil, err
	}

	return cfg, nil
}

func MustNew(filePath string) *Config {
	cfg, err := New(filePath)
	if err != nil {
		panic(err)
	}

	return cfg
}
{{ end }}